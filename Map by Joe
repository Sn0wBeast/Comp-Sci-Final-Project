#Test of Map
GRASSCOLOR = (24, 255, 0)
NUMGRASS = 80 
NUMTREES = 90
for i in range (1,5):
  GRASSIMAGES.append(pygame.image.load('grass%s.png' % i))
  TREEIMAGES.append(pygame.image.load('tree%s.ping' % i ))
while True:
  rungame()
  
def rungame():
grassObjs = []
treeObjs = []






DISPLAYSURF.fill(GRASSCOLOR)

for gObj in grassObjs:
    gRect = Conqueror.Rect(  ( gObj ['x'] - camerax, gObj['y'] - cameray, gObj['width'], gObjs['height']) )
    
                    DISPLAYSURF.blit(GRASSIMAGES[gObj['grassImage']], gRect)
                    



def getRandomOffCameraPos(camerax, cameray, objWidth, objHeight):

  cameraRext = Conqueror.Rect(camerax, cameray, cameray, WINDWIDTH, WINHEIGHT)
  
    while True:
    x = random.randint(camerax - WINWIDTH, camerax + (2 * WINWIDTH))
    y = random.ranint(cameray - WINHEIGHT, cameray + (2 * WINHEIGHT))
    
      objRect = Conqueror.Rect(x, y, objWidth, objHeight)
      if not objREct.colliderect(cameraRect):
        return x,y
        
        
        
        
        
        
def makenewplayer

pl = {}
    generalSize = random.randint(5, 25)
    
    pl['width']  = (generalSize + random.randint(0, 10)) 
    pl['height'] = (generalSize + random.randint(0, 10)) 
    pl['x'], pl['y'] = getRandomOffCameraPos(camerax, cameray, pl['width'], pl['height'])
    pl['movex'] = getRandomVelocity()
    pl['movey'] = getRandomVelocity()
    if pl['movex'] < 0: # player is facing left
        pl['surface'] = pygame.transform.scale(L_PLAYER_IMG, (pl['width'], pl['height']))
    else: # player is facing right
        pl['surface'] = pygame.transform.scale(R_PLAYER_IMG, (pl['width'], pl['height']))
    pl['walk'] = 0
    pl['walkingrate'] = random.randint(10, 18)
    pl['walkheight'] = random.randint(10, 50)
    return pl
    
    
    
 def makenewgrass
     gr = {}
    gr['grassImage'] = random.randint(0, len(GRASSIMAGES) - 1)
    gr['width']  = GRASSIMAGES[0].get_width()
    gr['height'] = GRASSIMAGES[0].get_height()
    gr['x'], gr['y'] = getRandomOffCameraPos(camerax, cameray, gr['width'], gr['height'])
    gr['rect'] = pygame.Rect( (gr['x'], gr['y'], gr['width'], gr['height']) )
    return gr

 
 
 
 
 
 def makenewtree
     tr = {}
    tr['treeImage'] = random.randint(0, len(TREEIMAGES) - 1)
    tr['width']  = TREEIMAGES[0].get_width()
    tr['height'] = TREEIMAGES[0].get_height()
    tr['x'], tr['y'] = getRandomOffCameraPos(camerax, cameray, tr['width'], tr['height'])
    tr['rect'] = pygame.Rect( (tr['x'], tr['y'], tr['width'], tr['height']) )
    return tr

 
 
 
 
 
 
 
 
 
 
 
 
 
 def makenewenemy
 en = {}
    generalSize = random.randint(5, 25)
    
    en['width']  = (generalSize + random.randint(0, 10)) 
    en['height'] = (generalSize + random.randint(0, 10)) 
    en['x'], pl['y'] = getRandomOffCameraPos(camerax, cameray, pl['width'], pl['height'])
    en['movex'] = getRandomVelocity()
    en['movey'] = getRandomVelocity()
   
        en['surface'] = pygame.transform.scale(L_ENEMY_IMG, (en['width'], en['height']))
    else: # player is facing right
        en['surface'] = pygame.transform.scale(R_ENEMY_IMG, (en['width'], en['height']))
  
    en['walkingrate'] = random.randint(10, 18)
    en['walkheight'] = random.randint(10, 50)
    return en
 
 
 
 
 
 
 
 
 
 
 
 def isOutsideActiveArea(camerax, cameray, obj):
    # Return False if camerax and cameray are more than
    # a half-window length beyond the edge of the window.
    boundsLeftEdge = camerax - WINWIDTH
    boundsTopEdge = cameray - WINHEIGHT
    boundsRect = pygame.Rect(boundsLeftEdge, boundsTopEdge, WINWIDTH * 3, WINHEIGHT * 3)
    objRect = pygame.Rect(obj['x'], obj['y'], obj['width'], obj['height'])
    return not boundsRect.colliderect(objRect)


if __name__ == '__main__':
    main()

 
 
 
 
 
 
 
 

        
        
